@page "/asistencia/registrar"
@inject IAsistenciaService AsistenciaService
@inject CustomAuthenticationStateProvider AuthStateProvider

<PageTitle>Registro de asistencia</PageTitle>

<Row Flex="Flex.JustifyContent.Center">
    <Column ColumnSize="ColumnSize.Is8.OnTablet.Is10.OnMobile">
        <Heading TextAlignment="TextAlignment.Center" Size="HeadingSize.Is1">Registro de asistencia</Heading>

        <Row Flex="Flex.JustifyContent.Center">
            <Alert Color="Color.Info" Padding="Padding.Is3" Visible="true">
                <AlertMessage>
                    <Paragraph>A tomar en cuenta:</Paragraph>
                </AlertMessage>

                <AlertDescription>
                    <UnorderedList>
                        <UnorderedListItem>En esta pantalla se registrará la asistencia del usuario que tenga la sesión iniciada en este dispositivo.</UnorderedListItem>
                        <UnorderedListItem>Debe leer el código QR que se encuentra en el establecimiento donde se vaya a dar el servicio de limpieza.</UnorderedListItem>
                        <UnorderedListItem>Para conseguir hacer la lectura, se debe hacer clic en el botón "Iniciar Cámara" y conceder los permisos necesarios a la aplicación.</UnorderedListItem>
                    </UnorderedList>
                </AlertDescription>
            </Alert>
        </Row>

        <LectorQR OnCodeReceived="VerificarSucursal" />

        <Row Visibility="SpinkitVisibility" Flex="Flex.JustifyContent.Center">
            <BlazorPro.Spinkit.Flow />
        </Row>
    </Column>
</Row>

@code {
    [Inject] public IModalService ModalService { get; set; } = null!;

    private bool ShowErrors;
    private IEnumerable<string> Errors = null!;

    private Visibility SpinkitVisibility = Visibility.Invisible;

    private Task ShowError(RenderFragment errorRenderFragment) => ModalService.Show("", errorRenderFragment);
    private Task ShowSuccess(RenderFragment successRenderFragment) => ModalService.Show("", successRenderFragment);

    private void ShowSpinKit() => SpinkitVisibility = Visibility.Visible;
    private void HideSpinKit() => SpinkitVisibility = Visibility.Invisible;

    private async void VerificarSucursal(int args)
    {
        // MOSTRAR QUE SE ESTA HACIENDO LA ACCION PERO VA A TARDAR
        ShowSpinKit();

        // INICIALIZAR RENDER FRAGMENT PARA MOSTRAR LOS MENSAJES DE EXITO O ERROR
        RenderFragment renderFragment = null!;

        // VERIFICAR LA EXISTENCIA DE SUCURSAL
        ApiResponse<SucursalServicioViewModel> sucursalResult = await AsistenciaService
            .VerificarSucursal(new VerificacionSucursalRequest { IdSucursal = args });

        if (sucursalResult.Successful)
        {
            // OBTENER LOS CLAIMS DE SESION PARA OBTENER EL NOMBRE DE USUARIO
            AuthenticationState authstate = await AuthStateProvider.GetAuthenticationStateAsync();
            ClaimsPrincipal user = authstate.User;
            string name = user.Identity!.Name!;

            // REGISTRAR LA ASISTENCIA CON LOS DATOS ANTERIORES
            ApiResponse<RegistroAsistenciaResult> registroResult = await AsistenciaService
                .RegistrarAsistencia(new RegistroAsistenciaRequest { Username = name, IdSucursal = sucursalResult.Result!.Id });

            if (registroResult.Successful)
            {
                if (registroResult.Result!.EsEntrada)
                {
                    HideSpinKit();

                    // MOSTRAR EXITO
                    renderFragment = __builder =>
                    {
                        <NOAM_ASISTENCIA.Client.Shared.Alerts.AsistenciaSuccessRenderFragment Result="@registroResult.Result" />
                    };

                    await ShowSuccess(renderFragment);
                }
            }
            else
            {
                HideSpinKit();

                // MOSTRAR ERROR
                renderFragment = __builder =>
                {
                    <NOAM_ASISTENCIA.Client.Shared.Alerts.ErrorAlertRenderFragment Errors="@registroResult.ErrorMessages" />
                };

                await ShowError(renderFragment);
            }
        }
        else
        {
            HideSpinKit();

            // MOSTRAR ERROR
            renderFragment = __builder =>
            {
                <NOAM_ASISTENCIA.Client.Shared.Alerts.ErrorAlertRenderFragment Errors="@sucursalResult.ErrorMessages" />
            };

            await ShowError(renderFragment);
        }

        HideSpinKit();
    }
}
