@page "/account/register"
@layout AuthLayout
@inject IAccountService authService
@inject NavigationManager navigationManager

<PageTitle>Registro de usuario</PageTitle>

<Div TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromBottom">
    <Heading Size="HeadingSize.Is3" TextColor="TextColor.Black50" Margin="Margin.Is4.FromBottom">Registro de usuario</Heading>
</Div>

<Divider />

<Row>
    <Column>
        @if (showErrors)
        {
            <Alert Color="Color.Danger" role="alert">
                @foreach (var error in errors)
                {
                    <Paragraph class="mb-0">@error</Paragraph>
                }
            </Alert>
        }

        <Validations @ref="validationsRef" Model="@modelRequest" Mode="ValidationMode.Auto" ValidateOnLoad="false">
            <ValidationSummary />

            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.UserName">Nombre de Usuario</FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Nombre de Usuario" @bind-Text="@modelRequest.UserName">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.Email">Correo Electrónico</FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Correo Electrónico" @bind-Text="@modelRequest.Email">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.Nombres">Nombre(s)</FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Nombre(s)" @bind-Text="@modelRequest.Nombres">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.Apellidos">Apellidos(s)</FieldLabel>
                    <FieldBody>
                        <TextEdit Placeholder="Apellidos(s)" @bind-Text="@modelRequest.Apellidos">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>



            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.Password">Contraseña</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" Placeholder="Contraseña" @bind-Text="@modelRequest.Password">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Validation>
                <Field Margin="Margin.Is3.FromBottom">
                    <FieldLabel For="@modelRequest.ConfirmPassword">Confirmar Contraseña</FieldLabel>
                    <FieldBody>
                        <TextEdit Role="TextRole.Password" Placeholder="Confirmar Contraseña" @bind-Text="@modelRequest.ConfirmPassword">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </FieldBody>
                </Field>
            </Validation>

            <Row Margin="Margin.Is3.FromBottom" Flex="Flex.JustifyContent.Center">
                <Column ColumnSize="ColumnSize.Is6.OnTablet" Margin="Margin.Is3.FromBottom">
                    <Button Clicked="@HandleSubmit" Color="Color.Primary" Width="Width.Is100">Crear cuenta</Button>
                </Column>

                <Column ColumnSize="ColumnSize.Is6.OnTablet" Margin="Margin.Is3.FromBottom">
                    <Button To="/" Type="ButtonType.Link" Color="Color.Primary" Width="Width.Is100">Volver a Inicio <Icon Name="@("fa-home")" /></Button>
                </Column>
            </Row>
        </Validations>
    </Column>
</Row>

<Divider />

<Div TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromBottom">
    <Anchor To="/account/login">¿Ya cuentas con un usuario y contraseña? ¡Inicia sesión!</Anchor>
</Div>

@code {
    private Validations? validationsRef = new Validations();
    private RegisterRequest modelRequest = new RegisterRequest();
    private IEnumerable<TurnoDTO> Turnos = null!;

    private bool showErrors;
    private bool showTurnos;
    private IEnumerable<TurnoDTO> turno = null!;
    private IEnumerable<string> errors = null!;

    protected override async Task OnInitializedAsync()
    {
        
    }

    private async Task HandleSubmit()
    {
        if (await validationsRef!.ValidateAll())
        {
            await Submit();
        }
    }

    private async Task Submit()
    {
        showErrors = false;

        ApiResponse<RegisterResult> result = await authService.Register(modelRequest);

        if (result.Successful)
        {
            navigationManager.NavigateTo($"/account/register/emailconfirmation/{modelRequest.UserName}/{modelRequest.Email}/{false}");
        }
        else
        {
            errors = result.ErrorMessages;
            showErrors = true;
        }
    }
}