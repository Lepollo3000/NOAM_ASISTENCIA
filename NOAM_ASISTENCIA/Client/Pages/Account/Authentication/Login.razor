@page "/account/login"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject IAccountService authService

<PageTitle>Inicio de sesión</PageTitle>

<Div TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromBottom">
    <Heading Size="HeadingSize.Is3" TextColor="TextColor.Black50" Margin="Margin.Is4.FromBottom">Inicio de sesión</Heading>
</Div>

<Divider />

<Row>
    <Column>
        <Alert Color="Color.Danger" @bind-Visible="showErrors">
            @if (showErrors)
            {
                @foreach (var error in errors)
                {
                    <Paragraph class="mb-0">@error</Paragraph>
                }
            }
        </Alert>

        <Row>
            <Column>
                <Validations @ref="validationsRef" Model="@modelRequest" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    <ValidationSummary />

                    <Validation>
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldLabel For="@modelRequest.UserName">Nombre de Usuario</FieldLabel>
                            <FieldBody>
                                <TextEdit Placeholder="Nombre de Usuario" @bind-Text="@modelRequest.UserName">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldLabel For="@modelRequest.Password">Contraseña</FieldLabel>
                            <FieldBody>
                                <TextEdit Role="TextRole.Password" Placeholder="Contraseña" @bind-Text="@modelRequest.Password">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Margin="Margin.Is3.FromBottom">
                            <FieldBody>
                                <Check TValue="bool" @bind-Checked="@modelRequest.RememberMe">
                                    <ChildContent>
                                        Recuérdame
                                    </ChildContent>
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </Check>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Row Margin="Margin.Is3.FromBottom" Flex="Flex.JustifyContent.Center">
                        <Column ColumnSize="ColumnSize.Is6.OnTablet" Margin="Margin.Is3.FromBottom">
                            <Button Clicked="@HandleSubmit" Color="Color.Primary" Width="Width.Is100">Iniciar Sesión</Button>
                        </Column>

                        <Column ColumnSize="ColumnSize.Is6.OnTablet" Margin="Margin.Is3.FromBottom">
                            <Button To="/" Type="ButtonType.Link" Color="Color.Primary" Width="Width.Is100">Volver a Inicio <Icon Name="@("fa-home")" /></Button>
                        </Column>
                    </Row>
                </Validations>
            </Column>
        </Row>
    </Column>
</Row>

<Divider />

<Div Margin="Margin.Is3.FromBottom" TextAlignment="TextAlignment.Center">
    <Link To="/account/forgotpassword">¿Se le olvidó la contraseña?</Link>
</Div>

@code {
    private Validations validationsRef = new Validations();
    private LoginRequest modelRequest = new LoginRequest();

    private bool showErrors = false;
    private IEnumerable<string> errors = null!;

    private async Task HandleSubmit()
    {
        showErrors = false;

        if (await validationsRef.ValidateAll())
        {
            await Submit();
        }
    }

    private async Task Submit()
    {
        ApiResponse result = await authService.Login(modelRequest);

        if (result.Successful)
        {
            navigationManager.NavigateTo("/");
        }
        else
        {
            errors = result.ErrorMessages;
            showErrors = true;
        }
    }
}
