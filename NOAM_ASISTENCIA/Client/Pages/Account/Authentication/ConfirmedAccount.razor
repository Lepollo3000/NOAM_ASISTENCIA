@page "/account/register/confirmedaccount/{UserId}/{Token}"
@layout AuthLayout
@inject IAccountService authService
@inject NavigationManager navigationManager

<PageTitle>Confirmación de cuenta</PageTitle>

<Column Flex="Flex.JustifyContent.Center" Padding="Padding.Is5">
    <Div TextAlignment="TextAlignment.Center">
        <DisplayHeading Size="DisplayHeadingSize.Is4" TextColor="TextColor.Black50" Margin="Margin.Is4.FromBottom">Confirmación de cuenta</DisplayHeading>
    </Div>

    <Divider />

    @if (!successful)
    {
        if (showErrors)
        {
            <Alert Color="Color.Danger" role="alert">
                @foreach (var error in errors)
                {
                    <Paragraph class="mb-0">@error</Paragraph>
                }

                @if (isTokenError)
                {
                    <Paragraph class="mb-0">Normalmente este error ocurre debido a que el token expiró. Puede intentar reenviar el correo de confirmación al correo con el que se registró su cuenta ('@userEmail') dando clic en el siguiente enlace:</Paragraph>
                    <Anchor TextColor="TextColor.Black50" To="@linkCorreoConfirmacion">Reenviar correo de confirmación</Anchor>
                }
            </Alert>
        }
        else
        {
            <Paragraph>Cargando...</Paragraph>
        }

    }
    else
    {
        <Paragraph>Su cuenta '@username' ha sido confirmada de forma exitosa.</Paragraph>
        <Paragraph>Apartir de ahora ya puede iniciar sesión en nuestra aplicación.</Paragraph>
    }

    <Divider />

    <Field TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromBottom">
        <Column ColumnSize="ColumnSize.Is6">
            <Button To="/account/login" Color="Color.Primary">Iniciar Sesión</Button>
        </Column>

        <Column ColumnSize="ColumnSize.Is6">
            <Button To="/" Color="Color.Primary">Volver a Inicio <Icon Name="@("fa-home")" /></Button>
        </Column>
    </Field>
</Column>

@code {
    [Parameter]
    public string UserId { get; set; } = null!;
    [Parameter]
    public string Token { get; set; } = null!;

    private string linkCorreoConfirmacion = "/account/register/emailconfirmation/resend/@UserId";

    private string username = null!;
    private string userEmail = null!;

    private bool successful = false;
    private bool showErrors = false;
    private bool isTokenError = false;
    private IEnumerable<string> errors = null!;

    protected override async Task OnInitializedAsync()
    {
        CheckIfParametersAreNull();

        ConfirmEmailRequest model = new ConfirmEmailRequest() { Token = Token, UserId = UserId };
        ApiResponse result = await authService.ConfirmEmail(model);
        ConfirmEmailResult modelResult = (result.Result as ConfirmEmailResult)!;

        if (modelResult != null)
        {
            if (result.Successful)
            {
                userEmail = modelResult.UserEmail;
                username = modelResult.Username;
                successful = true;
            }
            else
            {
                isTokenError = modelResult.IsTokenError;
                userEmail = modelResult.UserEmail;
                username = modelResult.Username;
                errors = result.ErrorMessages;
                showErrors = true;
                successful = false;
            }
        }
        else
        {
            errors = new List<string>() { "Error inesperado. Inténtelo de nuevo más tarde." };
            showErrors = true;
            successful = false;
        }
    }

    private void CheckIfParametersAreNull()
    {
        if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(Token))
        {
            navigationManager.NavigateTo("/");
        }
    }
}
